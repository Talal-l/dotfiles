" vundle {{{
"set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
"alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

"let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'rdnetto/YCM-Generator'
Plugin 'godlygeek/tabular'
Plugin 'scrooloose/nerdtree'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'dracula/vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'othree/xml.vim'
Plugin 'kovisoft/slimv'
Plugin 'Chiel92/vim-autoformat'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-unimpaired'
Plugin 'turbio/bracey.vim'
Plugin 'mattn/emmet-vim'
Plugin 'w0rp/ale'
Plugin 'scrooloose/nerdcommenter'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'kien/ctrlp.vim'
Plugin 'vim-airline'
Plugin 'skywind3000/asyncrun.vim'
Plugin 'farfanoide/vim-kivy'
" markdown preview
Plugin 'suan/vim-instant-markdown'

"All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
"Brief help
":PluginList       - lists configured plugins
":PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
":PluginSearch foo - searches for foo; append `!` to refresh local cache
":PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"

" }}}
" writing aid {{{

"spelling
set spelllang=en_us
map <F8> :setlocal spell!<CR>

"instant markdown
map <C-m> :InstantMarkdownPreview<CR>
let g:instant_markdown_autostart = 0


" }}}
"general maps {{{

"show the limit for line length
"compile
"nnoremap <F5> :!g++ -g % -o ./bin/%:r<CR>
"compile md to latex
nnoremap <F2> :!pandoc % -o %:r.pdf<CR><CR>
"run
nnoremap <F6> :!./bin/%:r<CR>
"md to pdf
nnoremap <F2> :!pandoc % -o %:r.pdf<CR><CR>
"replace ecp with jk in insert mode
inoremap jk <esc>
"shortcut for nerdtree
map <C-n> :NERDTreeToggle<CR>

"set leader key
let mapleader = "\<Space>"
nnoremap <SPACE> <Nop>

"shortcut for autoformat
nnoremap <leader>f :Autoformat<CR>

"utilSnips mapping
let g:UltiSnipsExpandTrigger="<C-f>"

nnoremap <leader>v :tabedit $MYVIMRC<CR>

"ale mappings
nnoremap <leader>e :ALENextWrap<CR>
nnoremap <leader>E :ALEPreviousWrap<CR>
nnoremap <leader>r :ALEPreviousWrap<CR>

"YCM mappings
map gd  :YcmCompleter GoToDefinitionElseDeclaration<CR>

"nerd commenter mappings 
map gc <Plug>NERDCommenterToggle


" }}}
" style and formating {{{

"colorscheme solarized
colorscheme sierra

if has('mac')
    "colorscheme PaperColor
    "set background=light
else
endif

"number of visual spaces per TAB
set tabstop=4
"number of space in tab when editing
set softtabstop=4
"tabs are spaces
set expandtab
"indent 4 spaces instead of eight
set shiftwidth=4

set autoindent
"set textwidth=79

set t_Co=256
"Don't break words while wrapping
"set linebreak
"column length indicator
set colorcolumn=80
"Show line number
set number
"show the cursor position all the time
set ruler
"display incomplete commands
set showcmd

"show status line
set laststatus=2

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc



" }}}
" plugins config {{{

"YCM config
let g:ycm_global_ycm_extra_conf = '~/dotfiles/extra_config/ycm_extra_conf.py'
let g:ycm_python_binary_path="python3"
let g:ycm_server_keep_logfiles = 1
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_always_populate_location_list = 1
let g:ycm_log_level = "debug"

" utilsnips config
let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"

" ctrlp config 
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'



" }}}
" misc {{{

set nocompatible
filetype plugin on

"fold based on indentation
set foldmethod=indent

" reduce update time for githutter
set updatetime=100

"share clipboard with other windows (not working on mac sierra inside tmux)

if has("unix")
    let s:uname = substitute(system("uname -s"), '\n', '', '')

    if s:uname == "Darwin"
        "rnnning under mac
        " set correct YCM  path under mac
        let g:ycm_server_python_interpreter="/usr/local/bin/python3"
        if $TMUX == ''
            set clipboard+=unnamed
        endif
    elseif s:uname == "Linux"
        " set correct YCM  path under linux
        let g:ycm_server_python_interpreter = '/usr/bin/python3'
        set clipboard+=unnamed
    endif
endif

if $TMUX == ''
    set clipboard+=unnamed
endif

"allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has('mouse')
    set mouse=a
endif

syntax enable

"do incremental searching
set incsearch

set backup
set swapfile
"save undo's after file closes
set undofile
"how many undo's to save
set undolevels=1000
"keep 50 lines of command line history
set history=500
"move swap and backup to VimBackup
set undodir=~/.vim/backups//
set backupdir=~/.vim/backups//
set directory =~/.vim/backups//

" }}}
" auto commands {{{

augroup vimrc
    autocmd!
    "Disable automatic comment insertion
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    "Set spell and hard wrapping for md files
    autocmd FileType markdown setlocal spell tw=80

    "source the vimrc file after saving it
    autocmd bufwritepost .vimrc source $MYVIMRC
augroup END

" }}}
" python settings {{{

"Run python3 code
nnoremap <buffer> <F9> :exec '!python3' shellescape(@%, 1)<cr>

" }}}
" lisp settings {{{

"Start swank with slimv
let g:slimv_swank_cmd = '! tmux new-window -d -n REPL-SBCL "sbcl --load ~/.vim/bundle/slimv/slime/start-swank.lisp"'

" }}}

" vim:foldmethod=marker
